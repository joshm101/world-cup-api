#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('world-cup-api:server');
const http = require('http');
const mongoose = require('mongoose')

const { 
  WCA_MONGODB_CONNECTION_URI,
  WCA_MONGODB_CONNECTION_USERNAME,
  WCA_MONGODB_CONNECTION_PASSWORD
} = process.env

const hasRequiredEnvironmentVariables = () => {
  if (
    WCA_MONGODB_CONNECTION_URI &&
    WCA_MONGODB_CONNECTION_USERNAME &&
    WCA_MONGODB_CONNECTION_PASSWORD
  ) { 
    return true
  }
  return false
}

if (!hasRequiredEnvironmentVariables()) {
  console.error(
    'Error: Required environment variables are not set. Exiting.'
  )
  process.exit(1)
}

const MONGODB_CONNECTION_URL = (
  `mongodb://` +
  `${WCA_MONGODB_CONNECTION_USERNAME}:` +
  `${encodeURIComponent(WCA_MONGODB_CONNECTION_PASSWORD)}@` +
  `${WCA_MONGODB_CONNECTION_URI}`
)

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Connect to MongoDB
 */
// Connect to MongoDB
mongoose.connect(
  MONGODB_CONNECTION_URL
).then((_) => {
  console.log('Database connection successfully established.')
}).catch((error) => {
  console.error("There was an error connecting to database:")
  console.error(error.message)
  console.log('EXITING.')
  process.exit(1)
})


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
